import { Keypair, LAMPORTS_PER_SOL } from "@solana/web3.js";
import * as fs from "fs";
import bs58 from "bs58";
import { solanaConfig } from './config';

async function setupWallet() {
  console.log('üîë Setting up new Solana wallet...');
  console.log('=====================================\n');

  try {
    // Generate new keypair
    const keypair = Keypair.generate();
    console.log(`‚úÖ Generated new KeyPair`);
    console.log(`Wallet PublicKey: ${keypair.publicKey.toString()}`);
    console.log(`Network: ${solanaConfig.network}`);

    // Encode private key in base58 format
    const privateKey = bs58.encode(keypair.secretKey);
    console.log(`\nüîê Wallet PrivateKey (base58): ${privateKey}`);


    // Save base58 private key to file
    fs.writeFile("privateKey.txt", privateKey, "utf8", function (err: any) {
      if (err) {
        console.error('‚ùå Error saving private key:', err);
        return;
      }
      console.log("‚úÖ Private key saved to privateKey.txt");
    });

    // Save public key to file
    fs.writeFile("publicKey.txt", keypair.publicKey.toString(), "utf8", function (err: any) {
      if (err) {
        console.error('‚ùå Error saving public key:', err);
        return;
      }
      console.log("‚úÖ Public key saved to publicKey.txt");
    });

    // Create wallet info file
    const walletInfo = {
      publicKey: keypair.publicKey.toString(),
      privateKey: privateKey,
      network: solanaConfig.network,
      createdAt: new Date().toISOString(),
      note: "Generated by solana-token setup-wallet script"
    };

    fs.writeFile("wallet-info.json", JSON.stringify(walletInfo, null, 2), "utf8", function (err: any) {
      if (err) {
        console.error('‚ùå Error saving wallet info:', err);
        return;
      }
      console.log("‚úÖ Wallet info saved to wallet-info.json");
    });

    console.log('\nüìÅ Files created:');
    console.log('  - privateKey.txt (base58 format)');
    console.log('  - publicKey.txt (public key only)');
    console.log('  - wallet-info.json (complete wallet info)');

    // Request airdrop
    console.log('\nüí∞ Requesting airdrop...');
    try {
      const airdropSignature = await solanaConfig.connection.requestAirdrop(
        keypair.publicKey,
        LAMPORTS_PER_SOL
      );
      
      console.log(`‚úÖ Airdrop Transaction Id: ${airdropSignature}`);
      console.log(`üîó Explorer: https://explorer.solana.com/tx/${airdropSignature}?cluster=${solanaConfig.network}`);
      
      // Wait for confirmation
      console.log('\n‚è≥ Waiting for airdrop confirmation...');
      await solanaConfig.connection.confirmTransaction(airdropSignature);
      
      // Check balance
      const balance = await solanaConfig.connection.getBalance(keypair.publicKey);
      console.log(`\nüí∞ Wallet Balance: ${balance / LAMPORTS_PER_SOL} SOL`);
      
      if (balance > 0) {
        console.log('‚úÖ Airdrop successful!');
      } else {
        console.log('‚ùå Airdrop failed or still processing');
      }

    } catch (err) {
      console.error('‚ùå Airdrop error:', err);
    }

    console.log('\nüéâ Wallet setup completed!');
    console.log('=====================================');
    console.log('Next steps:');
    console.log('1. Copy the private key to your .env file');
    console.log('2. Use the wallet for creating tokens');
    console.log('3. Keep your private keys secure!');
    console.log('=====================================');

  } catch (error) {
    console.error('‚ùå Wallet setup failed:', error);
  }
}

// Run the setup
if (require.main === module) {
  setupWallet();
}

export { setupWallet };
